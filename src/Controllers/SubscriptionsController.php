<?php

declare(strict_types=1);

/*
 * PplusSubscriptionPapiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace PplusSubscriptionPapiLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use PplusSubscriptionPapiLib\Exceptions\ApiException;
use PplusSubscriptionPapiLib\Exceptions\AuthErrorTypeException;
use PplusSubscriptionPapiLib\Exceptions\InvalidReqTypeException;
use PplusSubscriptionPapiLib\Exceptions\OrderErrorTypeException;
use PplusSubscriptionPapiLib\Exceptions\OrderRespTypeErrorException;
use PplusSubscriptionPapiLib\Models\CancelReqType;
use PplusSubscriptionPapiLib\Models\CancelResType;
use PplusSubscriptionPapiLib\Models\OrderRequestType;
use PplusSubscriptionPapiLib\Models\OrderRespType;
use PplusSubscriptionPapiLib\Models\UpdateSubscription;

class SubscriptionsController extends BaseController
{
    /**
     * @param string $xUserId UserId of an user who bought a subscription. This will be an IES
     *        userId
     * @param string $xAuthorization This will be an IES system token
     * @param UpdateSubscription $body Data
     * @param string|null $xTransactionId Unique ID for a transaction
     *
     * @return OrderRespType Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function updateSubscription(
        string $xUserId,
        string $xAuthorization,
        UpdateSubscription $body,
        ?string $xTransactionId = null
    ): OrderRespType {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/v1/mojo/aggregate-subscription')
            ->parameters(
                HeaderParam::init('X-UserId', $xUserId),
                HeaderParam::init('X-Authorization', $xAuthorization),
                BodyParam::init($body),
                HeaderParam::init('Content-Type', 'application/json'),
                HeaderParam::init('X-TransactionId', $xTransactionId)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Request', InvalidReqTypeException::class))
            ->throwErrorOn('401', ErrorType::init('Unauthorized', AuthErrorTypeException::class))
            ->throwErrorOn('500', ErrorType::init('Error', OrderErrorTypeException::class))
            ->type(OrderRespType::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Cancel subscription for a given subscription ID
     *
     * @param string $userId UserId of an user who bought a subscription. This will be an IES userId
     * @param string $xAuthorization This will be an IES system token
     * @param CancelReqType $body Data
     * @param string|null $xTransactionId Unique ID for a transaction
     * @param string|null $origin Originating System
     *
     * @return CancelResType Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cancelSubscription(
        string $userId,
        string $xAuthorization,
        CancelReqType $body,
        ?string $xTransactionId = null,
        ?string $origin = null
    ): CancelResType {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/v1/subscriptions/cancel')
            ->parameters(
                HeaderParam::init('userId', $userId),
                HeaderParam::init('X-Authorization', $xAuthorization),
                BodyParam::init($body),
                HeaderParam::init('Content-Type', 'application/json'),
                HeaderParam::init('X-TransactionId', $xTransactionId),
                HeaderParam::init('origin', $origin)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Request', InvalidReqTypeException::class))
            ->throwErrorOn('401', ErrorType::init('Unauthorized', AuthErrorTypeException::class))
            ->throwErrorOn('500', ErrorType::init('Error', OrderErrorTypeException::class))
            ->type(CancelResType::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param string $xUserId UserId of an user who bought a subscription. This will be an IES
     *        userId
     * @param string $xAuthorization This will be an IES system token
     * @param OrderRequestType $body Data
     * @param string|null $xTransactionId Unique ID for a transaction
     *
     * @return OrderRespType Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function aggregateSubscription(
        string $xUserId,
        string $xAuthorization,
        OrderRequestType $body,
        ?string $xTransactionId = null
    ): OrderRespType {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/v1/mojo/aggregate-subscription')
            ->parameters(
                HeaderParam::init('X-UserId', $xUserId),
                HeaderParam::init('X-Authorization', $xAuthorization),
                BodyParam::init($body),
                HeaderParam::init('Content-Type', 'application/json'),
                HeaderParam::init('X-TransactionId', $xTransactionId)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Request', InvalidReqTypeException::class))
            ->throwErrorOn('401', ErrorType::init('Unauthorized', AuthErrorTypeException::class))
            ->throwErrorOn('500', ErrorType::init('Error', OrderRespTypeErrorException::class))
            ->type(OrderRespType::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Expire subscription for all past enddate internal and IA subscriptions
     *
     * @return CancelResType Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function expireSubscriptions(): CancelResType
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/v1/subscriptions/expiry');

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Request', InvalidReqTypeException::class))
            ->throwErrorOn('401', ErrorType::init('Unauthorized', AuthErrorTypeException::class))
            ->throwErrorOn('500', ErrorType::init('Error', OrderErrorTypeException::class))
            ->type(CancelResType::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}

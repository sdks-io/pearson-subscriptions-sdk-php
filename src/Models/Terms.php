<?php

declare(strict_types=1);

/*
 * PearsonSubscriptionsAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace PearsonSubscriptionsAPILib\Models;

use PearsonSubscriptionsAPILib\ApiHelper;
use stdClass;

/**
 * Container for the terms and renewal settings of the subscription.
 */
class Terms implements \JsonSerializable
{
    /**
     * @var InitialTerm|null
     */
    private $initialTerm;

    /**
     * @var RenewalTerm[]|null
     */
    private $renewalTerms;

    /**
     * @var string|null
     */
    private $renewalSetting;

    /**
     * @var bool|null
     */
    private $autoRenew;

    /**
     * Returns Initial Term.
     * Information about the first term of the subscription.
     */
    public function getInitialTerm(): ?InitialTerm
    {
        return $this->initialTerm;
    }

    /**
     * Sets Initial Term.
     * Information about the first term of the subscription.
     *
     * @maps initialTerm
     */
    public function setInitialTerm(?InitialTerm $initialTerm): void
    {
        $this->initialTerm = $initialTerm;
    }

    /**
     * Returns Renewal Terms.
     * List of renewal terms of the subscription. Only applicable if the type of the first term is `TERMED`
     * and the value of the `renewalSetting` field is `RENEW_WITH_SPECIFIC_TERM`.
     *
     * @return RenewalTerm[]|null
     */
    public function getRenewalTerms(): ?array
    {
        return $this->renewalTerms;
    }

    /**
     * Sets Renewal Terms.
     * List of renewal terms of the subscription. Only applicable if the type of the first term is `TERMED`
     * and the value of the `renewalSetting` field is `RENEW_WITH_SPECIFIC_TERM`.
     *
     * @maps renewalTerms
     *
     * @param RenewalTerm[]|null $renewalTerms
     */
    public function setRenewalTerms(?array $renewalTerms): void
    {
        $this->renewalTerms = $renewalTerms;
    }

    /**
     * Returns Renewal Setting.
     * Specifies the type of the terms that follow the first term if the subscription is renewed. Only
     * applicable if the type of the first term is `TERMED`.
     *
     * * `RENEW_WITH_SPECIFIC_TERM` - Each renewal term has a predefined duration. The first entry in
     * `renewalTerms` specifies the duration of the second term of the subscription, the second entry in
     * `renewalTerms` specifies the duration of the third term of the subscription, and so on. The last
     * entry in `renewalTerms` specifies the ultimate duration of each renewal term.
     * * `RENEW_TO_EVERGREEN` - The second term of the subscription does not have a predefined duration.
     */
    public function getRenewalSetting(): ?string
    {
        return $this->renewalSetting;
    }

    /**
     * Sets Renewal Setting.
     * Specifies the type of the terms that follow the first term if the subscription is renewed. Only
     * applicable if the type of the first term is `TERMED`.
     *
     * * `RENEW_WITH_SPECIFIC_TERM` - Each renewal term has a predefined duration. The first entry in
     * `renewalTerms` specifies the duration of the second term of the subscription, the second entry in
     * `renewalTerms` specifies the duration of the third term of the subscription, and so on. The last
     * entry in `renewalTerms` specifies the ultimate duration of each renewal term.
     * * `RENEW_TO_EVERGREEN` - The second term of the subscription does not have a predefined duration.
     *
     * @maps renewalSetting
     * @factory \PearsonSubscriptionsAPILib\Models\RenewalSettingEnum::checkValue
     */
    public function setRenewalSetting(?string $renewalSetting): void
    {
        $this->renewalSetting = $renewalSetting;
    }

    /**
     * Returns Auto Renew.
     * Specifies whether the subscription automatically renews at the end of the each term. For REDEMPTION,
     * default it to false.
     */
    public function getAutoRenew(): ?bool
    {
        return $this->autoRenew;
    }

    /**
     * Sets Auto Renew.
     * Specifies whether the subscription automatically renews at the end of the each term. For REDEMPTION,
     * default it to false.
     *
     * @maps autoRenew
     */
    public function setAutoRenew(?bool $autoRenew): void
    {
        $this->autoRenew = $autoRenew;
    }

    /**
     * Converts the Terms object to a human-readable string representation.
     *
     * @return string The string representation of the Terms object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'Terms',
            [
                'initialTerm' => $this->initialTerm,
                'renewalTerms' => $this->renewalTerms,
                'renewalSetting' => $this->renewalSetting,
                'autoRenew' => $this->autoRenew
            ]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->initialTerm)) {
            $json['initialTerm']    = $this->initialTerm;
        }
        if (isset($this->renewalTerms)) {
            $json['renewalTerms']   = $this->renewalTerms;
        }
        if (isset($this->renewalSetting)) {
            $json['renewalSetting'] = RenewalSettingEnum::checkValue($this->renewalSetting);
        }
        if (isset($this->autoRenew)) {
            $json['autoRenew']      = $this->autoRenew;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

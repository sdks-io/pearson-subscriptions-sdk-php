<?php

declare(strict_types=1);

/*
 * PplusSubscriptionPapiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace PplusSubscriptionPapiLib\Models;

use PplusSubscriptionPapiLib\ApiHelper;
use stdClass;

class TriggerDate implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $name;

    /**
     * @var string|null
     */
    private $triggerDate;

    /**
     * Returns Name.
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     *
     * @maps name
     */
    public function setName(?string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Trigger Date.
     * Date in YYYY-MM-DD format.
     */
    public function getTriggerDate(): ?string
    {
        return $this->triggerDate;
    }

    /**
     * Sets Trigger Date.
     * Date in YYYY-MM-DD format.
     *
     * @maps triggerDate
     */
    public function setTriggerDate(?string $triggerDate): void
    {
        $this->triggerDate = $triggerDate;
    }

    /**
     * Converts the TriggerDate object to a human-readable string representation.
     *
     * @return string The string representation of the TriggerDate object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify('TriggerDate', ['name' => $this->name, 'triggerDate' => $this->triggerDate]);
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->name)) {
            $json['name']        = $this->name;
        }
        if (isset($this->triggerDate)) {
            $json['triggerDate'] = $this->triggerDate;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

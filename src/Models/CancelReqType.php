<?php

declare(strict_types=1);

/*
 * PearsonSubscriptionsAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace PearsonSubscriptionsAPILib\Models;

use PearsonSubscriptionsAPILib\ApiHelper;
use stdClass;

class CancelReqType implements \JsonSerializable
{
    /**
     * @var string
     */
    private $subscriptionId;

    /**
     * @var string
     */
    private $subscriptionSource;

    /**
     * @var string
     */
    private $cancelReason;

    /**
     * @var string
     */
    private $cancelDate;

    /**
     * @param string $subscriptionId
     * @param string $subscriptionSource
     * @param string $cancelReason
     * @param string $cancelDate
     */
    public function __construct(
        string $subscriptionId,
        string $subscriptionSource,
        string $cancelReason,
        string $cancelDate
    ) {
        $this->subscriptionId = $subscriptionId;
        $this->subscriptionSource = $subscriptionSource;
        $this->cancelReason = $cancelReason;
        $this->cancelDate = $cancelDate;
    }

    /**
     * Returns Subscription Id.
     * Subscription id
     */
    public function getSubscriptionId(): string
    {
        return $this->subscriptionId;
    }

    /**
     * Sets Subscription Id.
     * Subscription id
     *
     * @required
     * @maps subscriptionId
     */
    public function setSubscriptionId(string $subscriptionId): void
    {
        $this->subscriptionId = $subscriptionId;
    }

    /**
     * Returns Subscription Source.
     * Internal or external
     */
    public function getSubscriptionSource(): string
    {
        return $this->subscriptionSource;
    }

    /**
     * Sets Subscription Source.
     * Internal or external
     *
     * @required
     * @maps subscriptionSource
     * @factory \PearsonSubscriptionsAPILib\Models\SubscriptionSourceEnum::checkValue
     */
    public function setSubscriptionSource(string $subscriptionSource): void
    {
        $this->subscriptionSource = $subscriptionSource;
    }

    /**
     * Returns Cancel Reason.
     * Reason for subscription cancel
     */
    public function getCancelReason(): string
    {
        return $this->cancelReason;
    }

    /**
     * Sets Cancel Reason.
     * Reason for subscription cancel
     *
     * @required
     * @maps cancelReason
     */
    public function setCancelReason(string $cancelReason): void
    {
        $this->cancelReason = $cancelReason;
    }

    /**
     * Returns Cancel Date.
     * cancellation date
     */
    public function getCancelDate(): string
    {
        return $this->cancelDate;
    }

    /**
     * Sets Cancel Date.
     * cancellation date
     *
     * @required
     * @maps cancelDate
     */
    public function setCancelDate(string $cancelDate): void
    {
        $this->cancelDate = $cancelDate;
    }

    /**
     * Converts the CancelReqType object to a human-readable string representation.
     *
     * @return string The string representation of the CancelReqType object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'CancelReqType',
            [
                'subscriptionId' => $this->subscriptionId,
                'subscriptionSource' => $this->subscriptionSource,
                'cancelReason' => $this->cancelReason,
                'cancelDate' => $this->cancelDate
            ]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['subscriptionId']     = $this->subscriptionId;
        $json['subscriptionSource'] = SubscriptionSourceEnum::checkValue($this->subscriptionSource);
        $json['cancelReason']       = $this->cancelReason;
        $json['cancelDate']         = $this->cancelDate;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

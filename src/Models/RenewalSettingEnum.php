<?php

declare(strict_types=1);

/*
 * PplusSubscriptionPapiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace PplusSubscriptionPapiLib\Models;

use Core\Utils\CoreHelper;
use Exception;
use stdClass;

/**
 * Specifies the type of the terms that follow the first term if the subscription is renewed. Only
 * applicable if the type of the first term is `TERMED`.
 *
 * * `RENEW_WITH_SPECIFIC_TERM` - Each renewal term has a predefined duration. The first entry in
 * `renewalTerms` specifies the duration of the second term of the subscription, the second entry in
 * `renewalTerms` specifies the duration of the third term of the subscription, and so on. The last
 * entry in `renewalTerms` specifies the ultimate duration of each renewal term.
 * * `RENEW_TO_EVERGREEN` - The second term of the subscription does not have a predefined duration.
 */
class RenewalSettingEnum
{
    public const RENEW_WITH_SPECIFIC_TERM = 'RENEW_WITH_SPECIFIC_TERM';

    public const RENEW_TO_EVERGREEN = 'RENEW_TO_EVERGREEN';

    private const _ALL_VALUES = [self::RENEW_WITH_SPECIFIC_TERM, self::RENEW_TO_EVERGREEN];

    /**
     * Ensures that all the given values are present in this Enum.
     *
     * @param array|stdClass|null|string $value Value or a list/map of values to be checked
     *
     * @return array|null|string Input value(s), if all are a part of this Enum
     *
     * @throws Exception Throws exception if any given value is not in this Enum
     */
    public static function checkValue($value)
    {
        $value = json_decode(json_encode($value), true); // converts stdClass into array
        if (CoreHelper::checkValueOrValuesInList($value, self::_ALL_VALUES)) {
            return $value;
        }
        throw new Exception("$value is invalid for RenewalSettingEnum.");
    }
}
